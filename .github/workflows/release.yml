name: Release Build

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - "release"

env:
  DOTNET_VERSION: "9.0.x"
  CONFIGURATION: "Release"
  APP_DIR: "src/Metrics.Web"
  RELEASE_BASE_DIR: "release"
  RELEASE_BUILD_DIR: "src/Metrics.Web/bin/Release/net9.0"

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ env.CONFIGURATION}} --no-restore

      - name: Test
        run: dotnet test --configuration ${{ env.CONFIGURATION}} --no-build

      # - name: Upload Build Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-output
      #     path: bin/${{ env.CONFIGURATION }}

  release:
    name: Create Release
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: github.event_name == 'push' && startsWith(github.ref_name, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Create necessary directories
        run: |
          pwd &&
          mkdir -p bin release &&
          ls -l
      # - name: Download Build Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-output
      #     path: bin/${{ env.CONFIGURATION }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Refine Version
        id: versions
        run: |
          CLEAN_VERSION=$(echo "${{ steps.get_version.outputs.VERSION}}" | sed 's/^v//' | sed 's/[^0-9.]//g')

          IFS='.' read -ra PARTS <<< "$CLEAN_VERSION"
          MAJOR=${PARTS[0]:-0}
          MINOR=${PARTS[1]:-0}
          PATCH=${PARTS[2]:-0}
          BUILD=${PARTS[3]:-0}
          FILE_VERSION="$MAJOR.$MINOR.$PATCH.$BUILD"
          ASSEMBLY_VERSION="$MAJOR.$MINOR.${PATCH-0}.${BUILD-0}"

          echo "FILE_VERSION=$FILE_VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=${{ steps.get_version.outputs.VERSION}}+${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set build number
        id: build_number
        run: |
          BUILD_DATE=$(date +%Y%m%d)
          BUILD_NUMBER=$(date +%H%M%S)
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      # - name: Set Release Directory
      #   id: set_release_dir
      #   run: |
      #     RELEASE_DIR="release/publish-${{ steps.get_version.outputs.VERSION }}"
      #     echo "RELEASE_DIR=$RELEASE_DIR" >> $GITHUB_OUTPUT

      - name: Print  Working Directory
        run: |
          pwd && ls -l

      # - name: Clean Release Directories
      #   run: |
      #     rm -rf ${{ env.RELEASE_BASE_DIR }}/all-*
      #     rm -rf ${{ env.RELEASE_BASE_DIR }}/win-x64-*
      - name: Clean previous releases
        run: rm -rf ${{ env.RELEASE_BASE_DIR }}/*

      # FILE_VERSION=$(echo "${{ steps.get_version.outputs.VERSION}}" | sed 's/[^0-9.]//g' | awk -F. '{printf "%d.%d.%d.%d", $1,$2,$3,$4}')
      - name: Publish *
        run: |
          cd src/Metrics.Web/ &&
          dotnet publish --configuration ${{ env.CONFIGURATION }} \
            --self-contained false \
            --output $GITHUB_WORKSPACE/${{ env.RELEASE_BASE_DIR }}/all-${{ steps.get_version.outputs.VERSION }} \
            -p:Version=${{ steps.get_version.outputs.VERSION }} \
            -p:FileVersion=${{ steps.versions.outputs.FILE_VERSION }}.${{ steps.build_number.outputs.BUILD_NUMBER }} \
            -p:InformationalVersion=${{ steps.versions.outputs.INFORMATIONAL_VERSION }} \
            -p:AssemblyVersion=${{ steps.versions.outputs.ASSEMBLY_VERSION }}

      # FILE_VERSION=$(echo "${{ steps.get_version.outputs.VERSION}}" | sed 's/[^0-9.]//g' | awk -F. '{printf "%d.%d.%d.%d", $1,$2,$3,$4}')
      - name: Publish win-x64
        run: |
          cd src/Metrics.Web/ &&
          dotnet publish --configuration ${{ env.CONFIGURATION }} \
            -r win-x64 \
            --self-contained false \
            --output $GITHUB_WORKSPACE/${{ env.RELEASE_BASE_DIR }}/win-x64-${{ steps.get_version.outputs.VERSION }} \
            -p:Version=${{ steps.get_version.outputs.VERSION }} \
            -p:FileVersion=${{ steps.versions.outputs.FILE_VERSION }}.${{ steps.build_number.outputs.BUILD_NUMBER }} \
            -p:InformationalVersion=${{ steps.versions.outputs.INFORMATIONAL_VERSION }} \
            -p:AssemblyVersion=${{ steps.versions.outputs.ASSEMBLY_VERSION }}

      - name: Print  Working Directory
        run: |
          pwd && ls -l

      - name: Create sql directory
        run: |
          mkdir -p ${{ env.RELEASE_BASE_DIR }}/all-${{ steps.get_version.outputs.VERSION }}/sql &&
          mkdir -p ${{ env.RELEASE_BASE_DIR }}/win-x64-${{ steps.get_version.outputs.VERSION }}/sql

      - name: Copy SQL files
        run: |
          cp src/Metrics.Web/Migrations/*.sql ${{ env.RELEASE_BASE_DIR }}/all-${{ steps.get_version.outputs.VERSION }}/sql &&
          cp src/Metrics.Web/Migrations/*.sql ${{ env.RELEASE_BASE_DIR }}/win-x64-${{ steps.get_version.outputs.VERSION }}/sql

      - name: Print Current Working Directory
        run: pwd && ls -l

      - name: Print Release Directory
        run: ls -R ${{ env.RELEASE_BASE_DIR }}/

      # - name: Create zip
      #   run: |
      #     cd ${{ steps.set_release_dir.outputs.RELEASE_DIR }} && \
      #     # Create zip archive for release (zip contents only, not the folder)
      #     zip -r ${{ steps.set_release_dir.outputs.RELEASE_DIR }}.zip .

      - name: Upload Release Artifact for *
        uses: actions/upload-artifact@v4
        with:
          name: release-metrics-all-${{ steps.get_version.outputs.VERSION }}
          path: ${{ env.RELEASE_BASE_DIR }}/all-${{ steps.get_version.outputs.VERSION }}

      - name: Upload Release Artifact for win-x64
        uses: actions/upload-artifact@v4
        with:
          name: release-metrics-winx64-${{ steps.get_version.outputs.VERSION }}
          path: ${{ env.RELEASE_BASE_DIR }}/win-x64-${{ steps.get_version.outputs.VERSION }}

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: ${{ github.ref }}
      #     name: Release ${{ steps.get_version.outputs.VERSION }}
      #     body: Release ${{ steps.get_version.outputs.VERSION }}
      #     files: publish-${{ steps.get_version.outputs.VERSION }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{  steps.get_version.outputs.VERSION }}
          body: |
            Automated release for version ${{  steps.get_version.outputs.VERSION }}
            - Commit: ${{ github.sha }}
            - Build: ${{ github.run_number }}
          files: ${{ env.RELEASE_BASE_DIR }}/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Runner (Optional)
        run: rm -rf publish-* # Clean up release directory
