name: Release Build

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - "release"

env:
  DOTNET_VERSION: "9.0.x"
  CONFIGURATION: "Release"
  APP_DIR: "src/Metrics.Web"
  RELEASE_BUILD_DIR: "src/Metrics.Web/bin/Release/net9.0"

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print Current Working Directory
        run: pwd

      - name: Create necessary directories
        run: |
          mkdir -p bin release

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ env.CONFIGURATION}} --no-restore

      - name: Test
        run: dotnet test --configuration ${{ env.CONFIGURATION}} --no-build

      # - name: Upload Build Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-output
      #     path: bin/${{ env.CONFIGURATION }}

  release:
    name: Create Release
    needs: build-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # - name: Download Build Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-output
      #     path: bin/${{ env.CONFIGURATION }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Set Release Directory
        id: set_release_dir
        run: |
          RELEASE_DIR="release/publish-${{ steps.get_version.outputs.VERSION }}"
          echo "RELEASE_DIR=$RELEASE_DIR" >> $GITHUB_OUTPUT

      - name: Publish
        run: |
          dotnet publish --configuration ${{ env.CONFIGURATION }} \
            --self-contained false \
            --output release/${{ steps.set_release_dir.outputs.RELEASE_DIR }} \
            -p:Version=${{ steps.get_version.outputs.VERSION }} \
            -p:FileVersion=${{ steps.get_version.outputs.VERSION }} \
            -p:InformationalVersion=${{ steps.get_version.outputs.VERSION }}

      - name: Print  Working Directory
        run: pwd && ls -l

      - name: Create sql directory
        run: |
          mkdir -p ${{ steps.set_release_dir.outputs.RELEASE_DIR }}/sql

      - name: Copy SQL files
        run: cp src/Metrics.Web/Migrations/*.sql ${{ steps.set_release_dir.outputs.RELEASE_DIR }}/sql

      - name: Print Current Working Directory
        run: pwd && ls -l

      - name: Print Release Directory ${{ steps.set_release_dir.outputs.RELEASE_DIR }}
        run: ls -l ${{ steps.set_release_dir.outputs.RELEASE_DIR }}

      # - name: Create zip
      #   run: |
      #     cd ${{ steps.set_release_dir.outputs.RELEASE_DIR }} && \
      #     # Create zip archive for release (zip contents only, not the folder)
      #     zip -r ${{ steps.set_release_dir.outputs.RELEASE_DIR }}.zip .

      - name: Upload Release Zip as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-metrics-${{ steps.set_release_dir.outputs.RELEASE_DIR }}
          path: ${{ steps.set_release_dir.outputs.RELEASE_DIR }}

      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: ${{ github.ref }}
      #     name: Release ${{ steps.get_version.outputs.VERSION }}
      #     body: Release ${{ steps.get_version.outputs.VERSION }}
      #     files: publish-${{ steps.get_version.outputs.VERSION }}.zip

      - name: Clean Runner (Optional)
        run: rm -rf publish-* # Clean up release directory
