// <auto-generated />
using System;
using Metrics.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Metrics.Web.Migrations
{
    [DbContext(typeof(MetricsDbContext))]
    partial class MetricsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("metrics")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("department_key_kpis_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("departments_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("key_kpi_submission_items_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("key_kpi_submissions_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("key_kpis_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("kpi_submission_periods_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("kpi_submissions_id_seq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("user_titles_id_seq")
                .IncrementsBy(10);

            modelBuilder.Entity("Metrics.Application.Domains.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_application_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("application_roles", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("contact_address");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user_code");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<long>("UserTitleId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_title_id");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_application_users_department_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserCode")
                        .IsUnique()
                        .HasDatabaseName("ix_application_users_user_code");

                    b.HasIndex("UserTitleId")
                        .HasDatabaseName("ix_application_users_user_title_id");

                    b.ToTable("application_users", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "departments_id_seq");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DepartmentCode")
                        .HasColumnType("uuid")
                        .HasColumnName("department_code");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("department_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("DepartmentCode")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_department_code");

                    b.HasIndex("DepartmentName")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_department_name");

                    b.ToTable("departments", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.DepartmentKeyKpi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "department_key_kpis_id_seq");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("KeyKpiMetricId")
                        .HasColumnType("bigint")
                        .HasColumnName("key_kpi_metric_id");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_department_key_kpis");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_department_key_kpis_department_id");

                    b.HasIndex("KeyKpiMetricId")
                        .HasDatabaseName("ix_department_key_kpis_key_kpi_metric_id");

                    b.ToTable("department_key_kpis", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "key_kpis_id_seq");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("MetricCode")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_code");

                    b.Property<string>("MetricTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metric_title");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_key_kpis");

                    b.HasIndex("MetricCode")
                        .IsUnique()
                        .HasDatabaseName("ix_key_kpis_metric_code");

                    b.HasIndex("MetricTitle")
                        .IsUnique()
                        .HasDatabaseName("ix_key_kpis_metric_title");

                    b.ToTable("key_kpis", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpiSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "key_kpi_submissions_id_seq");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<long?>("KeyKpiId")
                        .HasColumnType("bigint")
                        .HasColumnName("key_kpi_id");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<long>("ScoreSubmissionPeriodId")
                        .HasColumnType("bigint")
                        .HasColumnName("score_submission_period_id");

                    b.Property<DateOnly>("SubmissionDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("date")
                        .HasColumnName("submission_date")
                        .HasComputedColumnSql("(submitted_at AT TIME ZONE 'UTC')::date", true);

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("Id")
                        .HasName("pk_key_kpi_submissions");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("ix_key_kpi_submissions_application_user_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_key_kpi_submissions_department_id");

                    b.HasIndex("KeyKpiId")
                        .HasDatabaseName("ix_key_kpi_submissions_key_kpi_id");

                    b.HasIndex("ScoreSubmissionPeriodId", "ApplicationUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_key_kpi_submissions_score_submission_period_id_application_");

                    b.ToTable("key_kpi_submissions", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpiSubmissionItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "key_kpi_submission_items_id_seq");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<long>("KeyKpiMetricsId")
                        .HasColumnType("bigint")
                        .HasColumnName("key_kpi_metrics_id");

                    b.Property<long>("KeyKpiSubmissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("key_kpi_submission_id");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<decimal>("ScoreValue")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("score_value");

                    b.HasKey("Id")
                        .HasName("pk_key_kpi_submission_items");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_key_kpi_submission_items_department_id");

                    b.HasIndex("KeyKpiMetricsId")
                        .HasDatabaseName("ix_key_kpi_submission_items_key_kpi_metrics_id");

                    b.HasIndex("KeyKpiSubmissionId", "KeyKpiMetricsId", "DepartmentId")
                        .IsUnique()
                        .HasDatabaseName("ix_key_kpi_submission_items_key_kpi_submission_id_key_kpi_metr");

                    b.ToTable("key_kpi_submission_items", "metrics", t =>
                        {
                            t.HasCheckConstraint("ck_kpi_submissions_kpi_score_gt_0", "score_value >= 0");
                        });
                });

            modelBuilder.Entity("Metrics.Application.Domains.KpiSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "kpi_submissions_id_seq");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("department_id");

                    b.Property<long>("KpiSubmissionPeriodId")
                        .HasColumnType("bigint")
                        .HasColumnName("kpi_submission_period_id");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("NegativeAspects")
                        .HasColumnType("text")
                        .HasColumnName("negative_aspects");

                    b.Property<string>("PositiveAspects")
                        .HasColumnType("text")
                        .HasColumnName("positive_aspects");

                    b.Property<decimal>("ScoreValue")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("score_value");

                    b.Property<DateOnly>("SubmissionDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("date")
                        .HasColumnName("submission_date")
                        .HasComputedColumnSql("(submitted_at AT TIME ZONE 'UTC')::date", true);

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("Id")
                        .HasName("pk_kpi_submissions");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("ix_kpi_submissions_application_user_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_kpi_submissions_department_id");

                    b.HasIndex("KpiSubmissionPeriodId", "DepartmentId", "ApplicationUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_kpi_submissions_kpi_submission_period_id_department_id_appl");

                    b.ToTable("kpi_submissions", "metrics", t =>
                        {
                            t.HasCheckConstraint("ck_kpi_submissions_kpi_score_gt_0", "score_value >= 0");
                        });
                });

            modelBuilder.Entity("Metrics.Application.Domains.KpiSubmissionPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "kpi_submission_periods_id_seq");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("period_name");

                    b.Property<DateTimeOffset>("SubmissionEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_end_date");

                    b.Property<DateTimeOffset>("SubmissionStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_start_date");

                    b.HasKey("Id")
                        .HasName("pk_kpi_submission_periods");

                    b.HasIndex("PeriodName")
                        .IsUnique()
                        .HasDatabaseName("ix_kpi_submission_periods_period_name");

                    b.ToTable("kpi_submission_periods", "metrics", t =>
                        {
                            t.HasCheckConstraint("ck_kpi_submission_periods_is_correct_period_code_format", "period_name ~ '^[0-9]{4}-[0-9]{2}$'");

                            t.HasCheckConstraint("ck_kpi_submission_periods_start_date_lt_end_date", "submission_start_date < submission_end_date");
                        });
                });

            modelBuilder.Entity("Metrics.Application.Domains.UserTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "user_titles_id_seq");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid>("TitleCode")
                        .HasColumnType("uuid")
                        .HasColumnName("title_code");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("varchar (200)")
                        .HasColumnName("title_name");

                    b.HasKey("Id")
                        .HasName("pk_user_titles");

                    b.HasIndex("TitleCode")
                        .IsUnique()
                        .HasDatabaseName("ix_user_titles_title_code");

                    b.HasIndex("TitleName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_titles_title_name");

                    b.ToTable("user_titles", "metrics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims", "metrics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims", "metrics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins", "metrics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles", "metrics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", "metrics");
                });

            modelBuilder.Entity("Metrics.Application.Domains.ApplicationUser", b =>
                {
                    b.HasOne("Metrics.Application.Domains.Department", "Department")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_application_users_departments_department_id");

                    b.HasOne("Metrics.Application.Domains.UserTitle", "UserTitle")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("UserTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_application_users_user_titles_user_title_id");

                    b.Navigation("Department");

                    b.Navigation("UserTitle");
                });

            modelBuilder.Entity("Metrics.Application.Domains.DepartmentKeyKpi", b =>
                {
                    b.HasOne("Metrics.Application.Domains.Department", "Department")
                        .WithMany("DepartmentKeyKpiMetrics")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_department_key_kpis_departments_department_id");

                    b.HasOne("Metrics.Application.Domains.KeyKpi", "KeyKpi")
                        .WithMany("DepartmentKeyKpis")
                        .HasForeignKey("KeyKpiMetricId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_department_key_kpis_key_kpis_key_kpi_metric_id");

                    b.Navigation("Department");

                    b.Navigation("KeyKpi");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpiSubmission", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationUser", "SubmittedBy")
                        .WithMany("KeyKpiSubmissions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_key_kpi_submissions_users_application_user_id");

                    b.HasOne("Metrics.Application.Domains.Department", null)
                        .WithMany("DepartmentMetricsScores")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_key_kpi_submissions_departments_department_id");

                    b.HasOne("Metrics.Application.Domains.KeyKpi", null)
                        .WithMany("KeyKpiSubmissions")
                        .HasForeignKey("KeyKpiId")
                        .HasConstraintName("fk_key_kpi_submissions_key_kpis_key_kpi_id");

                    b.HasOne("Metrics.Application.Domains.KpiSubmissionPeriod", "TargetPeriod")
                        .WithMany("KeyKpiSubmissions")
                        .HasForeignKey("ScoreSubmissionPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_key_kpi_submissions_kpi_submission_periods_score_submission");

                    b.Navigation("SubmittedBy");

                    b.Navigation("TargetPeriod");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpiSubmissionItem", b =>
                {
                    b.HasOne("Metrics.Application.Domains.Department", "TargetDepartment")
                        .WithMany("KeyKpiSubmissionItems")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_key_kpi_submission_items_departments_department_id");

                    b.HasOne("Metrics.Application.Domains.KeyKpi", "TargetMetric")
                        .WithMany("KeyKpiSubmissionItems")
                        .HasForeignKey("KeyKpiMetricsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_key_kpi_submission_items_key_kpis_key_kpi_metrics_id");

                    b.HasOne("Metrics.Application.Domains.KeyKpiSubmission", "ParentSubmission")
                        .WithMany("KeyKpiSubmissionItems")
                        .HasForeignKey("KeyKpiSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_key_kpi_submission_items_key_kpi_submissions_key_kpi_submis");

                    b.Navigation("ParentSubmission");

                    b.Navigation("TargetDepartment");

                    b.Navigation("TargetMetric");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KpiSubmission", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationUser", "SubmittedBy")
                        .WithMany("KpiSubmissions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kpi_submissions_users_application_user_id");

                    b.HasOne("Metrics.Application.Domains.Department", "TargetDepartment")
                        .WithMany("DepartmentScores")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kpi_submissions_departments_department_id");

                    b.HasOne("Metrics.Application.Domains.KpiSubmissionPeriod", "TargetPeriod")
                        .WithMany("KpiSubmissions")
                        .HasForeignKey("KpiSubmissionPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_kpi_submissions_kpi_submission_periods_kpi_submission_perio");

                    b.Navigation("SubmittedBy");

                    b.Navigation("TargetDepartment");

                    b.Navigation("TargetPeriod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Metrics.Application.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Metrics.Application.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Metrics.Application.Domains.ApplicationUser", b =>
                {
                    b.Navigation("KeyKpiSubmissions");

                    b.Navigation("KpiSubmissions");
                });

            modelBuilder.Entity("Metrics.Application.Domains.Department", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("DepartmentKeyKpiMetrics");

                    b.Navigation("DepartmentMetricsScores");

                    b.Navigation("DepartmentScores");

                    b.Navigation("KeyKpiSubmissionItems");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpi", b =>
                {
                    b.Navigation("DepartmentKeyKpis");

                    b.Navigation("KeyKpiSubmissionItems");

                    b.Navigation("KeyKpiSubmissions");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KeyKpiSubmission", b =>
                {
                    b.Navigation("KeyKpiSubmissionItems");
                });

            modelBuilder.Entity("Metrics.Application.Domains.KpiSubmissionPeriod", b =>
                {
                    b.Navigation("KeyKpiSubmissions");

                    b.Navigation("KpiSubmissions");
                });

            modelBuilder.Entity("Metrics.Application.Domains.UserTitle", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
