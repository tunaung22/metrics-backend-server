@page "/Submissions/Department-Metric-Scores/{periodName}/Submit"
@using Metrics.Application.Domains
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.VisualBasic
@model Metrics.Web.Pages.Submissions.DepartmentMetricScores.SubmitModel
@{
    ViewData["Title"] = "Submission for Department Key Metric Score";
    decimal[] scoreList = new decimal[] { 1M, 2M, 3M, 4M, 5M, 6M, 7M, 8M, 9M, 10M };
}


<div class="sectionTitle">
    <h4>Submission for Department Key Metric Score <strong>@Model.TargetKpiPeriodName</strong></h4>
    @* <div id="submissionStatusBar" class="fixed-bottom mt-2 mb-0 px-4 p-2 d-flex align-items-center justify-content-center">
        <p class="px-4 mb-0"><strong>Progress:</strong> <span id="formProgress">0</span> of @Model.SubmissionInput.Count</p>
    </div> *@
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-page="/Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-page="/Submissions/DepartmentMetricScores/Index">Submissions</a></li>
            <li class="breadcrumb-item"><a asp-page="/Submissions/DepartmentMetricScores/Index">Submission List</a></li>
            <li class="breadcrumb-item active">Submit</li>
        </ol>
    </nav>
</div>


<div class="container-fluid">
    <div class="p-4">

        <div asp-validation-summary="ModelOnly" class="alert alert-danger text-danger"></div>

        @if(Model.IsSubmissionValid)  @* Date is due or early. *@
        {

            @if (!Model.IsSubmissionsExist)  @* New Submission (No submission exist.) *@
            {
                @if (Model.KeyKpiSubmissionConstraints.Count > 0)
                {
                    @* ===== Departments are based on DepartmentKeyMetrics which depends on KeyKpiSubmissionConstraints ===== *@
                    @* ===== No KeyKpiSubmissionConstraints means: No Department Key Metrics ===== *@
                    <form method="post">
                        @* ======== Submitter's Info ========= *@
                        <div class="d-flex align-items-center mb-2 bg-light p-4 rounded-2">
                            <h5 class="d-flex align-items-center gap-2 mb-0">
                                <div class="">Submitter: 
                                    <span class="text-success">@Model.Submitter.FullName</span></div>
                                <div>Department: 
                                    <span class="text-success">@Model.Submitter.Department.DepartmentName</span></div>
                            </h5>
                            <div class="form-group col-md d-flex justify-content-end align-items-center gap-2">
                                <button type="button" class="btn btn-warning me-2" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#cancelDialogstaticBackdrop">
                                    <i class="bi bi-x-circle"> </i>Cancel</button>
                                <button type="button" class="btn btn-primary me-2" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#submitDialogBackdrop">
                                    <i class="bi bi-check-circle"> </i>Submit</button>
                            </div>
                        </div>

                        <div>
                            @* -----METHOD 3: Change Input Model ------------- *@
                            @* 
                                1. get key issue departments from Model
                                2. loop departments, for each department:
                                    - get render and bind with child items                            
                            *@

                            <table id="submissionTable" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>No.</th>
                                        <th>Department</th>
                                        <th>Key</th>
                                        <th>Score</th>
                                        <th>Comments</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ 
                                        long rowNo = 0; 
                                    }
                                    @for(int i=0; i<Model.Inputs.Count; i++)
                                    {
                                        var keyDepartmentName = Model.KeyIssueDepartmentList
                                            .Where(d=> d.Id == Model.Inputs[i].KeyIssueDepartmentId)
                                            .Select(d=>d.DepartmentName)
                                            .FirstOrDefault();

                                        for(int k=0; k<Model.Inputs[i].InputDetails.Count; k++)
                                        {
                                            rowNo += 1;
                                            var inputDetailCount = @Model.Inputs[i].InputDetails.Count;
                                            @* <li>DKM ID: @InputDetails[k].DepartmentKeyMetricsId</li>
                                            <li>Score: @InputDetails[k].ScoreValue</li>
                                            <li>Comment: @InputDetails[k].Comments</li> *@
                                            <tr>
                                                <td>@rowNo</td>
                                                <input type="hidden" asp-for="Inputs[i].InputDetails[k].DepartmentKeyMetricsId" />
                                                <td>@(k+1)/@inputDetailCount <strong>@keyDepartmentName</strong></td>
                                                <td>@Model.Inputs[i].InputDetails[k].DepartmentKeyMetric?.KeyMetric.MetricTitle</td>
                                                <td>
                                                    <select asp-for="Inputs[i].InputDetails[k].ScoreValue" class="form-select">
                                                        @for(int x = 0; x < scoreList.Length; x++) {
                                                            <option value="@scoreList[x]">
                                                                @scoreList[x].ToString("0.00")
                                                            </option>
                                                        }
                                                    </select>
                                                </td>
                                                <td>
                                                    <textarea asp-for="Inputs[i].InputDetails[k].Comments" 
                                                            class="form-control" 
                                                            rows="5"></textarea>
                                                </td>
                                            </tr>   
                                        }

                                    }
                                </tbody>
                            </table>


@* 
                                    @foreach(var input in Model.Inputs)
                                    {
                                    }

                                        for(int i=0; i<departments.Count; i++)
                                        {
                                            // get keys of a department
                                            var DKMs = Model.KeyKpiSubmissionConstraints
                                                .Where(c=> c.DepartmentKeyMetric.KeyIssueDepartmentId == departments[i].Id)
                                                .Select(c => c.DepartmentKeyMetric).ToList();

                                            for(int k=0; k<DKMs.Count; k++)
                                            {
                                                rowNo += 1;
                                                var dkmId = DKMs[k].Id;
                                                var input = Model.SubmissionInputs.Where(i=> i.DepartmentKeyMetricsId == dkmId).FirstOrDefault();
                                                if(input != null)
                                                {
                                                    
                                                }
                                            }
                                        } *@
                               
                            



                            @* -----METHOD 2: loop by Department------------- *@
                            @* -----**WARN**:  SubmissionInputs only get the last loop's data
                                        as it bind the model with index SubmissionInputs[i].ScoreValue
                                POSSIBLE: due to flat layout of input model
                                FIX: it works if not rendering by department
                            *@
                            
                            @* @{
                                var departments = Model.SubmissionInputs
                                    .OrderBy(i=> i.DepartmentKeyMetric.KeyIssueDepartment.DepartmentName)
                                    .DistinctBy(i=> i.DepartmentKeyMetric.KeyIssueDepartment.DepartmentName)
                                    .Select(i=>i.DepartmentKeyMetric.KeyIssueDepartment)
                                    .ToList();
                            }

                            <table id="submissionTable" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>No.</th>
                                        <th>Department</th>
                                        <th>Key</th>
                                        <th>Score</th>
                                        <th>Comments</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if(departments != null)
                                    {
                                        long rowNo = 0;

                                        for(int i=0; i<departments.Count; i++)
                                        {
                                            // get keys of a department
                                            var DKMs = Model.KeyKpiSubmissionConstraints
                                                .Where(c=> c.DepartmentKeyMetric.KeyIssueDepartmentId == departments[i].Id)
                                                .Select(c => c.DepartmentKeyMetric).ToList();

                                            for(int k=0; k<DKMs.Count; k++)
                                            {
                                                rowNo += 1;
                                                var dkmId = DKMs[k].Id;
                                                var input = Model.SubmissionInputs.Where(i=> i.DepartmentKeyMetricsId == dkmId).FirstOrDefault();
                                                if(input != null)
                                                {
                                                    <tr>
                                                        <td>@rowNo</td>
                                                        <input type="hidden" asp-for="SubmissionInputs[k].DepartmentKeyMetricsId" />
                                                        <td>(@(i+1)/@DKMs.Count) <strong>@departments[i].DepartmentName</strong></td>
                                                        <td>@DKMs[i].KeyMetric.MetricTitle</td>
                                                        <td>
                                                            <select asp-for="SubmissionInputs[k].ScoreValue" class="form-select">
                                                                @for(int x = 0; x < scoreList.Length; x++) {
                                                                    <option value="@scoreList[x]">
                                                                        @scoreList[x].ToString("0.00")
                                                                    </option>
                                                                }
                                                            </select>
                                                        </td>
                                                        <td>
                                                            <textarea asp-for="SubmissionInputs[k].Comments" 
                                                                    class="form-control" 
                                                                    rows="5"></textarea>
                                                        </td>
                                                    </tr>   
                                                }
                                            }
                                        }
                                    }
                                </tbody>
                            </table> *@

                            
                            @* -----METHOD 1: loop by Department------------- *@
                            @* -----Group by key issue department------------ *@
                            @* **WARN**:  SubmissionInputs only get the last loop's data
                                        as it bind the model with index SubmissionInputs[i].ScoreValue
                            *@

                            @* @{
                                var departments = Model.SubmissionInputs
                                    .OrderBy(i=> i.DepartmentKeyMetric.KeyIssueDepartment.DepartmentName)
                                    .DistinctBy(i=> i.DepartmentKeyMetric.KeyIssueDepartment.DepartmentName)
                                    .Select(i=>i.DepartmentKeyMetric.KeyIssueDepartment)
                                    .ToList();
                            }
                            
                            <table id="submissionTable" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th>No.</th>
                                        <th>Department</th>
                                        <th>Key</th>
                                        <th>Score</th>
                                        <th>Comments</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ long rowNo = 0; }
                                    @if(departments != null)
                                    {
                                        @foreach(var department in departments)
                                        {
                                            var keysOfDepartment = Model.SubmissionInputs
                                                .Where(i => i.DepartmentKeyMetric.KeyIssueDepartmentId==department.Id)
                                                .ToList();

                                            @for(int i=0; i<keysOfDepartment.Count; i++)
                                            {
                                                rowNo += 1;

                                                <tr>
                                                    <td>@rowNo</td>
                                                    <input type="hidden" asp-for="SubmissionInputs[i].DepartmentKeyMetricsId" />
                                                    <td>(@(i+1)/@keysOfDepartment.Count) <strong>@department.DepartmentName</strong></td>
                                                    <td>@keysOfDepartment[i].DepartmentKeyMetric?.KeyMetric.MetricTitle</td>
                                                    <td>
                                                        <select asp-for="SubmissionInputs[i].ScoreValue" class="form-select">
                                                            @for(int x = 0; x < scoreList.Length; x++) {
                                                                <option value="@scoreList[x]">
                                                                    @scoreList[x].ToString("0.00")
                                                                </option>
                                                            }
                                                        </select>
                                                    </td>
                                                    <td>
                                                        <textarea asp-for="SubmissionInputs[i].Comments" 
                                                                class="form-control" 
                                                                rows="5"></textarea>
                                                    </td>
                                                </tr>   
                                            }
                                        }
                                    }
                                </tbody>
                            </table> *@
                        </div>

                        @* =========== MODAL =========== *@
                        @* ---------- SUBMIT DIALOG ---------- *@
                        <div class="modal fade" id="submitDialogBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="submitDialogStaticBackdropLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="submitDialogStaticBackdropLabel">Confirmation</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to submit the form?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" 
                                                class="btn btn-secondary"
                                                data-bs-dismiss="modal">
                                            <i class="bi bi-x-circle"> </i>No</button>
                                        <button type="submit"
                                                class="btn btn-primary me-2">
                                            <i class="bi bi-check-circle"> </i>Submit</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @* ---------- CANCEL DIALOG ---------- *@
                        <div class="modal fade" id="cancelDialogstaticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="cancelDialogStaticBackdropLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h1 class="modal-title fs-5" id="cancelDialogStaticBackdropLabel">Cancel</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to cancel the submission?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" 
                                                class="btn btn-secondary"
                                                data-bs-dismiss="modal">
                                            <i class="bi bi-x-circle"> </i>No</button>

                                            <button asp-page-handler="Cancel" type="submit" 
                                                    class="btn btn-primary ms-2" formnovalidate>
                                                <i class="bi bi-check-circle"> </i>Yes</button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                }
                else // Model.KeyKpiSubmissionConstraints.Count == 0
                {
                    <h5 class="my-4 mx-auto alert alert-danger">No submissions avaiable, Please contact Administrator.
                        <small>(Reason: No keys avaiable.)</small></h5>
                }
            }
            else
            {
                @* var submissionDate = @Model.FinishedSubmissions.Select(s=>s.SubmissionDate); *@

                <h5 class="my-4 text-success">You have submitted submission for the period <strong>@Model.TargetKpiPeriodName</strong>.</h5>
                <div class="my-4">
                    <span>
                        Check <strong><a class="" asp-page="/Submissions/DepartmentMetricScores/Index">Submissions</a></strong>.
                    </span>
                </div>

                @* -----display already submitted data----- *@ 
                @* <h4>Your submitted data are as follow...</h4> *@

                 <div class="mt-4">
                    <div class="table-responsive">
                        <table id="dataTable" class="table table-bordered table-striped" style="width: 100%;">
                            <thead>
                                <tr>
                                    <th id="colDepartment">Department</th>
                                    <th id="colMetric">Metrics</th>
                                    <th id="colScore">Score Given</th>
                                    <th id="colComments">Comments</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Finished.Any())
                                {
                                    @foreach (var submission in Model.Finished)
                                    {
                                        <tr>
                                            @* <td class="text-center">@s.SubmissionDate.ToString("MMM dd, yyyy")</td> *@
                                            <td class=""><strong>@submission.KeyIssueDepartmentName</strong></td>
                                            <td>
                                                @{
                                                    var metricTitle = submission.DepartmentKeyMetrics.KeyMetric.MetricTitle;
                                                }
                                                @if(metricTitle != null && metricTitle.Any()) {
                                                    if(metricTitle.Length > 150) {
                                                        @(metricTitle.Substring(0, 150) + "...")
                                                        <button data-details="@metricTitle" data-label="Comments"
                                                                class="moreButton_comments btn btn-link p-0 pb-2">More</button>
                                                    }
                                                    else {
                                                        @metricTitle
                                                    }
                                                }
                                                else {
                                                    @:None
                                                }
                                            </td>
                                            <td class="text-center">@submission.ScoreValue</td>
                                            <td>
                                                @if(submission.Comments != null && submission.Comments.Any()) {
                                                    if(submission.Comments.Length > 150) {
                                                        @(submission.Comments.Substring(0, 150) + "...")
                                                        <button data-details="@submission.Comments" data-label="Comments"
                                                                class="moreButton_comments btn btn-link p-0 pb-2">More</button>
                                                    }
                                                    else {
                                                        @submission.Comments
                                                    }
                                                }
                                                else {
                                                    @:None
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
        else
        {
            <h1>Submission not valid.</h1>
            @if (!ModelState.IsValid && !Model.IsSubmissionsExist)
            {

                <div class="form bg-light p-4">
                    <div class="alert alert-danger">
                        <h5>There were some errors in the form.</h5>
                        <ul>
                            <li>@ModelState.Values.SelectMany(v => v.Errors).First().ErrorMessage</li>
                        </ul>
                    </div>
                </div>
            }
        }
    </div>
</div>


<!--Modal Dialog -->
<div id="dialog_textDetail" class="modal" tabindex="-1" aria-labelledby="dialogTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dialogTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="dialogContent"></p>
            </div>
             <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <style>
        .radioLabel__scoreValue, .radioInput__scoreValue {
            cursor: pointer;
        }

        .radioLabel__scoreValue {
            padding: 0.5rem;  /* Clickable area padding */
            transition: background-color 0.2s;  
            border: .1em solid #fff;
        }
        .radioLabel__scoreValue:hover {
            border: .1em solid #007bff;
        }

        /* Align radio and text */
        .radioLabel__scoreValue .radioInput__scoreValue-check-input {
            margin-top: 0;
        }

        .radioLabel__scoreValue:has(.radioInput__scoreValue:checked) {
            border: .1em solid #007bff;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        $(function() {
            // ------------------- Data Table ----------------------------------
            new DataTable('#submissionTable', {
                paging: false,
                info: false,
                searching: false,
                autoWidth: true,
                columnDefs: [
                    { orderable: false, targets: [ 0, 3, 4 ] },
                    { width: "40%", targets: [4] },
                ],
                initComplete: function() {
                    $('thead th').addClass('text-light text-center align-middle');
                    $('thead th').addClass('bg-brand-color');
                }
            });




            new DataTable('#dataTable', {
                paging: false,
                info: false,
                searching: false,
                columnDefs: [
                    { orderable: false, targets: [ "#colComments"] },
                    { width: "15%", targets: ["#colDepartment", "#colIssueDepartment"] },
                    { width: "40%", targets: ["#colMetric"] },
                    { width: "8%", targets: ["#colScore"] },
                ],
                initComplete: function() {
                    $('thead th').addClass('text-light text-center align-middle');
                    $('thead th').addClass('bg-brand-color');
                }
            });
            
            // ------------------- Show Dialog ---------------------------------
            $('.moreButton_comments').click(function() {
                var fullText = $(this).data('details');
                var label = $(this).data('label');
                $("#dialogTitle").text(label);

                if (fullText !== undefined) {
                    $("#dialogContent").text(fullText);
                    $("#dialog_textDetail").modal("show");
                } else {
                    console.error('data is undefined');
                }
            });

            // ------------------- goToTop button implementation ---------------
            // Get the button
            var mybutton = document.getElementById("goToTop");

            if(mybutton != null)
            {
                // When the user scrolls down 20px from the top of the document, show the button
                window.onscroll = function() {
                    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                        mybutton.style.display = "block";
                    } else {
                        mybutton.style.display = "none";
                    }
                };

                // When the user clicks on the button, scroll to the top of the document
                mybutton.onclick = function() {
                    document.body.scrollTop = 0; // For Safari
                    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE, and Opera
                };
            }

        });
        //-----------------------------------------------------------------------
    </script>
}